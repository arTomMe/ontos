---
name: Code Style and Structure
priority: 80
scope:
  globs: ["api/**", "src/**"]
  languages: ["python", "typescript"]
---

### Code Style and Structure

**Backend (Python/FastAPI)**

- Use `def` for pure functions and `async def` for asynchronous operations (FastAPI route handlers, SDK calls).
- **Type Hints**: Use Python type hints extensively. Use Pydantic models for API input/output validation and SQLAlchemy models for DB interaction.
- **File Structure**: Maintain clear separation of concerns (routes, controllers, repositories, models, db_models, common utilities).
- **RORO Pattern**: API models follow "Receive an Object, Return an Object". Controllers often receive/return API models, mapping to/from DB models via the repository.
- **Error Handling**:
  - Use FastAPI's `HTTPException` for API errors.
  - Handle specific exceptions (e.g., `SQLAlchemyError`, `ValidationError`, `DatabricksError`, `NotFound`) in controllers/repositories.
  - Use guard clauses and early returns.
  - Implement structured logging via `api/common/logging.py`.
- **Dependency Injection**: Rely heavily on FastAPI's DI for providing database sessions, managers, settings, and workspace clients to routes (see `api/common/dependencies.py` and manager getters in route files). Managers are initialized as singletons in `app.state` during startup.

**Frontend (TypeScript/React)**

- **TypeScript Usage**: Use TypeScript strictly. Prefer interfaces (`interface`) over types (`type`) for defining object shapes where applicable. Use mapped types or utility types instead of enums.
- **Functional Components**: Write all components as functional components using hooks.
- **UI and Styling**: Use **Shadcn UI** components built on **Tailwind CSS**. Follow responsive design principles.
- **State Management**: Use `useState`, `useEffect`, `useContext` for local/shared state. Use Zustand (`stores/`) for global state (e.g., permissions, breadcrumbs).
- **Data Fetching**: Use a custom hook (`hooks/useApi`) wrapping `fetch` or `axios` for API interactions. Handle loading and error states explicitly. Use `async/await`.
- **Forms**: Use `react-hook-form` for form management and validation, often integrated with Shadcn UI components and Zod for schema validation.
- **Performance**:
  - Minimize `useEffect`, `useState`.
  - Use `React.memo`, `useMemo`, `useCallback` where appropriate.
  - Consider server-side patterns if applicable, although primary interaction is client-side with API.
  - Use `Suspense` for lazy loading components if needed.