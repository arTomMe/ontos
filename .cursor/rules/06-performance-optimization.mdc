---
name: Performance Optimization
priority: 70
scope:
  globs: ["api/**", "src/**"]
  languages: ["python", "typescript"]
---

### Performance Optimization

**Backend**

- **Asynchronous Operations**: Use `async/await` for SDK calls and potentially database operations if using an async driver.
- **Database Query Optimization**: Use efficient SQLAlchemy queries (e.g., `selectinload` for eager loading relationships in repositories). Add database indexes where needed (`db_models`).
- **Caching**: Consider caching for frequently accessed, rarely changing data (e.g., settings, roles) if performance becomes an issue.

**Frontend**

- **Component Memoization**: Use `React.memo`, `useMemo`, `useCallback`.
- **Bundle Size**: Monitor bundle size and use code splitting/lazy loading if necessary.
- **Efficient Data Fetching**: Fetch only necessary data. Use libraries like TanStack Query for caching/staleness management if needed.