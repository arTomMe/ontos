import uuid
from datetime import datetime
from enum import Enum
from typing import List, Dict, Optional

from pydantic import BaseModel, Field

from api.common.features import FeatureAccessLevel, APP_FEATURES


class JobCluster(BaseModel):
    id: str
    name: str
    node_type_id: str
    autoscale: bool
    min_workers: int
    max_workers: int
    status: str
    workspace_id: str

class WorkflowInstallation(BaseModel):
    id: str
    name: str
    installed_at: datetime
    updated_at: datetime
    status: str
    workspace_id: str

# --- RBAC Models ---

class AppRoleBase(BaseModel):
    """Base model for AppRole, containing common fields."""
    name: str = Field(..., description="Display name of the role.")
    description: Optional[str] = Field(None, description="Optional description of the role.")
    assigned_groups: List[str] = Field(default_factory=list, description="List of directory group names assigned to this role.")
    feature_permissions: Dict[str, FeatureAccessLevel] = Field(
        default_factory=dict,
        description="Permissions assigned to this role for each feature ID."
    )

class AppRole(AppRoleBase):
    """Model representing an application role and its permissions, including ID."""
    # ID is a UUID represented as a string
    id: str = Field(..., description="Unique identifier for the role (UUID string).")

    @staticmethod
    def get_default_permissions() -> Dict[str, FeatureAccessLevel]:
        """Returns default permissions (usually NONE) for all configurable features."""
        return {feature_id: FeatureAccessLevel.NONE for feature_id in APP_FEATURES.keys()}

class AppRoleCreate(AppRoleBase):
    """Model used for creating a new application role. ID is optional."""
    # ID is optional during creation; if provided, it should be a valid UUID string.
    # If None, a new UUID will be generated by the backend.
    id: Optional[str] = Field(None, description="Optional UUID string. Generated if not provided.")
    pass # Inherits all fields from AppRoleBase
