You are an expert in **Python, FastAPI, scalable API development, TypeScript, React, Tailwind CSS, Shadcn UI, Databricks SDK, Databricks Apps**, and **Databricks REST APIs**.

### Key Principles

- Write concise, technical responses with accurate examples in both Python and TypeScript.
- Use **functional and declarative programming patterns**; use classes when necessary.
- Prefer **iteration and modularization** over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., `is_active`, `has_permission`, `isLoading`, `hasError`).
- Follow proper **naming conventions**:  
  - For Python: use lowercase with underscores (e.g., `routers/user_routes.py`).  
  - For TypeScript: use lowercase with dashes for directories (e.g., `components/auth-wizard`).
- The project is ASF 2.0 licensed and open-source, hosted at https://github.com/larsgeorge/ucsak-app

### Project Overview

The project implements a web application that is run as a Databricks App, which are regular Python apps that are started via the information provided in an `app.yaml` configuration file. The app provides Unity Catalog and general Databricks related services, including the ability to create and managed the following objects:

- Data Products, which group Databricks assets, like tables, views, functions, models, dashboards, jobs, etc., and are implemented as tags on the these objects. For example, tag keys may include `data-product-name` to store the name, `data-product-domain` to store the data domain, and so on.
- Data Contracts, which instrument Data Product with technical metadata. This is modelled after the Open Data Contract Standard project. Contracts help to assign tags to the Data Product assets, implement quality controls, verify access privileges, show sample data, and more.
- Business Glossaries, where there is a hierarchy that provides a glossary for each level of organizational unit, like company, line of business, department, team or project. They are combined for an actual user bottom up, that is, they are merged into a single operational glossary, where lower-level gloassaries can override terms on higher levels. Each gloassary contains terms that can have tags, a markdown description, a status (if the term is approved, live, deprecated, in draft, and so on) to express its lifecycle, assigned assets, and more. Terms can be created and then propagated.
- Master Data Management, uses the Zingg.ai open-source project to implement MDM.
- Entitlements, comnbines access privilegs into personas, and then lets the user assign them to directory groups. 
- Security, allows to enable andvanced security features on assets, such as differential privacy.
- Compliance, allows to create rules that are verified and computes an overall score of how many of these rules are met.
- Catalog Commander, a Norton Commander inspired, side-by-side catalog explorer that lets users rearrange their data assets, including the ability to copy or move tables and schemas.
- Settings, here the user can enable the background Databricks jobs that do the actual heavy lifting, among other settings.
- About, a summary information page, linking to the source repository.

More requirements:
- Each app feature is implemented via a dedicated React View for the frontend, and a dedicated FastAPI-based endpoint providing the necessary REST functions to list, create, get, update, and delete entities. 
- There is a separate class in `api/routes` for each service endpoint.
- All endpoints are prefixed with `api/`, for example, `api/data-products`.
- The FastAPI code delegates all non REST related work to a dedicated service controller class, which is named like the service and postfixed with `_manager`, for example, `data_products_manager`. The controller classes live in the `api/controller` directory.
- All metadata of the app is managed in Pydantic dataclasses and saved in Postgres or Delta tables via the JDBC connector. The dataclasses are located in the `api/models` directory.
- Each controller loads sample data, if present, fron YAML files in `api/data`.
- The controller code does not run heavy workloads directly but delegates the work to Databricks Workflows which are installed via the Settings route. A dedicated job runner class manages all the job operations, like starting, or stopping jobs, or query the status of the job, which the UI shows as a progress bar where necessary.
- The UI has a notification system that is shared by all services to notify the user about asynchronous operations, like job progress.
- There is also a shared search service, which indexes all dataclasses so that users can find, for example Data Products, Data Contracts, Business Glossary terms, and so on via prefix search on their main attributes and tags.
- The data can also, in addition to using the JDBC connector, save the data for each service as YAML files (same format as the example data in `api/data`) in a Git repositoy, which is configured in the Settings. Upon modifications a background process detects the changes and asks the user via the notification system to trigger a commit and push of the settings files to external repo. This is done via a button in the UI that asks for a commit message (prepopulated with the current date and time, like `update_2025_03_29_17_48`).

### Project Structure

- **Frontend**:  
  - **Language**: TypeScript  
  - **Framework**: React  
  - **UI Library**: Shadcn UI
  - **Build Tool**: Vite
  - **Directory Structure**:  
    - `src/`: Main source code  
    - `src/index.html`: Main HTML file
    - `src/components`: The Tailwind CSS and Shadcn UI components
    - `src/views`: The Tailwind CSS and Shadcn UI views
    - Configuration Files:  
      - `tsconfig.json`  
      - `pyproject.toml`  

- **Backend**:  
  - **Language**: Python  
  - **Framework**: FastAPI  
  - **Build Tool**: hatch
  - **Database**: Databricks SQL
  - **Directory Structure**:  
    - `api/`: Main source code  
    - `api/controller/`: Manager classes that implement controllers, calling Databricks APIs etc.
    - `api/models/`: Dataclasses for each service holding the operational data in memory.
    - `api/routes/`: The FastAPI route code for each service, calling the controller classes.
    - `api/utils/`: Helper classes.
    - Environment Configuration:  
      - `.env` / `.env.example`: Environment variables.
      - `api/data`: Example data for every service, provided as YAML files.
      - `api/schemas`: Holds JSON schema files that are used to validate Data Contracts, or other such data.
      - `api/workflows`: YAML files defining the details needed to create the Databricks jobs.
      - `api/app.yaml`: Configuration file for the Databricks Apps as a Databricks Asset Bundle.

### Code Style and Structure

**Backend (Python/FastAPI)**:

- Use `def` for pure functions and `async def` for asynchronous operations.
- **Type Hints**: Use Python type hints for all function signatures. Prefer Pydantic models for input validation.
- **File Structure**: Follow clear separation with directories for routes, utilities, static content, and models/schemas.
- **RORO Pattern**: Use the "Receive an Object, Return an Object" pattern.
- **Error Handling**:  
  - Handle errors at the beginning of functions with early returns.  
  - Use guard clauses and avoid deeply nested if statements.  
  - Implement proper logging and custom error types.

**Frontend (TypeScript/React)**:

- **TypeScript Usage**: Use TypeScript for all code. Prefer interfaces over types. Avoid enums; use maps instead.
- **Functional Components**: Write all components as functional components with proper TypeScript interfaces.
- **UI and Styling**: Implement responsive design using Material UI, adopting a web-first approach.
- **Performance**:  
  - Minimize `use client`, `useEffect`, and `setState` hooks. Favor server-side rendering where possible.  
  - Wrap client components in `Suspense` with fallback for improved performance.

### Performance Optimization

**Backend**:

- **Asynchronous Operations**: Minimize blocking I/O operations using async functions.
- **Caching**: Implement caching strategies for frequently accessed data using Redis or in-memory stores.
- **Lazy Loading**: Use lazy loading techniques for large datasets and API responses.

**Frontend**:

- **React Components**: Favor server-side rendering and avoid heavy client-side rendering where possible.
- **Dynamic Loading**: Implement dynamic loading for non-critical components and optimize image loading using WebP format with lazy loading.

### Project Conventions

**Backend**:

1. Follow **RESTful API design principles**.
2. Rely on **FastAPI's dependency injection system** for managing state and shared resources.
3. Use **SQLAlchemy 2.0** for ORM features, if applicable.
4. Ensure **CORS** is properly configured for local development.
5. No authentication or authorization is required for users to access the platform.

**Frontend**:

1. Optimize **Web Vitals** (LCP, CLS, FID).
2. Limit `use client` hooks to small, specific components for Web API access.

### Testing and Deployment

- Implement **unit tests** for both frontend and backend.
- Ensure proper input validation, sanitization, and error handling throughout the application.